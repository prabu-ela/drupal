<?php

function profile_load_profile(&$user)
{
    return $user;
}

function nlr_html_head_alter(&$elements) {
    if (!empty($elements['opengraph_meta_og:image'])) {
      $node = menu_get_object();
      if (!empty($node->field_aux_article_image)) {
        $full_image = _imagefield_crop_file_to_crop($node->field_aux_article_image['und'][0]['fid']);
        if (!empty($full_image->uri)) {
            $full_image_path = image_style_url('social_media', $full_image->uri);
            $elements['opengraph_meta_og:image']['#attributes']['content'] = $full_image_path;
        }
      }
    }
}

function nlr_node_view_alter(&$build)
{
    $build['links']['reprints-and-permissions']['#theme'] = 'links';
    $build['links']['reprints-and-permissions']['#links']['reprints-and-permissions'] = array(
        'title' => t('REPRINTS & PERMISSIONS'),
        'href' => 'reprints-and-permissions',
        'html' => TRUE,
        'attributes' => array(
            'title' => 'REPRINTS & PERMISSIONS',
        ),
    );
    $build['links']['reprints-and-permissions']['#attributes'] = array(
        'class' => array(
            '0' => 'links',
            '1' => 'inline',
        ),
    );
}

function nlr_cron()
{
    // Get number of articles in drop-down
    $view_name = 'feature_level_2';
    $display_id = 'block_20';
    $res = views_get_view_result($view_name, $display_id);
    $cnt = count($res);

    //read file
    $content = file_get_contents(drupal_get_path('module', 'nlr') . '/dynamic-cache.template.js');

    // here goes your update
    $content = preg_replace('/:countArticles/', $cnt, $content);

    //write file
    file_put_contents(drupal_get_path('module', 'nlr') . '/dynamic-cache.js', $content);



  // // DELETE OLD NODES
	// // we only want to deal with messages (a content type)
	// $message_type = "article";

	// // grab all messages
	// $message_nodes = node_load_multiple(array(), array('type' => $message_type));
	// // set up the timestamp for the expiry
	// $message_search_date = strtotime("-13 years");

	// // now loop through messages, & if they are old, expire them
	// foreach($message_nodes as $m) {

	// 	$obj = entity_metadata_wrapper('node', $m);

	// 	// when was it last updated, & is it still published?
	// 	$last_update = $obj->changed->value();
	// 	$published = $obj->status->value();

	// 	// if it's still published & it's not recent, then unpublish it
	// 	if(($message_search_date > $last_update)) {
	// 		$obj->delete();
	// 	}
	// }

}

/**
 * Override RSS item dc:creator with Organization Name
 * @param mixed $node
 * @param mixed $view_mode
 */
function nlr_node_view($node, $view_mode)
{
    $arr = explode('/', $_SERVER['REQUEST_URI']);
    if ($arr[sizeof($arr) - 1] == 'feed') {
        // Only process when viewing an RSS feed
        $node_author = node_load($node->field_author['und'][0]['nid']);
        $node_org = node_load($node_author->field_author_org['und'][0]['nid']);
        $node->rss_elements[1] = array(
            'key' => 'dc:creator',
            'value' => $node_org->title
        );
    }
}

function nlr_menu()
{
    $items = array();
    $items['homepage/audit-moderators'] = array(
        'access callback' => TRUE,  //or 'user_is_logged_in' to check if logged in
        'type' => MENU_LOCAL_TASK,
        'weight' => 0,
        'page callback' => 'nlr_moderators',
        'title' => t('Audit Moderators'),
    );
    $items['user/%/audit'] = array(
        'title' => 'Audits',
        'page callback' => 'nlr_user_audit',
        'page arguments' => array(1),
        'weight' => 99,
        'access callback' => TRUE,
        'access arguments' => array(1),
        'description' => 'Show audit information about a user',
        'type' => MENU_LOCAL_TASK
    );
    return $items;
}

/**
 *  Moderator page
 */
function nlr_moderators()
{
  $interval = 7;
  $role = 'Moderator';
  $output = theme('html_tag', array( 'element' => array('#tag' => 'h2', '#value' => $role . ' audits for the last ' . $interval . ' days.')));

  // List All Moderators
  $users = _nlr_users_by_role($role);

  foreach( $users as $user ) {
    $output .= _nlr_moderator_audit_list( $user->uid, $interval );
  }

  return $output;
}

function _nlr_moderator_audit_list($uid = null, $interval = 1)
{

  if (is_null($uid)) return;

  $output = "";
  $audits = array();

  // Audit heading
  $header = array(
    array('data' => t('Node Name')),
    array('data' => t('Node Type')),
    array('data' => t('#&nbsp;Changes')),
    array('data' => t('Last Date'))
  );

  // Query audit items
  $args = array(':uid' => $uid);
  $sql = 'SELECT id, uid, count(id) AS "cnt", node_type, MAX(CONVERT_TZ(create_date,\'GMT\',\'US/CENTRAL\')) as "create_date"
      FROM {nlr_audit} WHERE uid = :uid AND CONVERT_TZ(create_date,\'GMT\',\'US/CENTRAL\') >= now() - INTERVAL ' . $interval . ' DAY GROUP BY id ORDER BY create_date DESC';
  $result = db_query($sql, $args);

  // Display User name
  if (!$result->rowCount()) return;

  $u = user_load($uid);
  $full_name = l($u->profile_first_name . ' ' . $u->profile_last_name, '/user/' . $uid . '/audit');
  $output .= '<h2>' . $full_name . '</h2>';

  foreach($result as $audit) {
    $n = node_load($audit->id);
    $audits[] = array(
      l($n->title, '/node/' . $n->nid . '/edit', array('attributes' => array('target' => '_blank')) ),
      $audit->node_type,
      array( 'data' => $audit->cnt, 'style' => 'text-align: center;'),
      array( 'data' => $audit->create_date, 'style' => 'width:150px; text-align: center;')
    );
  }

  if (sizeof($audits))
    $output .= theme('table',  array(
      'header' => $header,
      'rows' => $audits,
      'empty' => 'No content has been worked on the last ' . $interval . ' days by ' . $full_name . '.',
      'attributes' => array('style' => 'width: 100%' )));

  return $output;
}

/**
 * Show specific moderators audits
 * @param int $uid Drupal userID
 */
function nlr_user_audit($uid) {
  $interval = 180;
  $output = theme('html_tag', array( 'element' => array('#tag' => 'h2', '#value' => 'Audits for the last ' . $interval . ' days')));
  $output .= _nlr_moderator_audit_list( $uid, $interval );
  return $output;
}

/**
 * Implements template_preprocess_views_view_rss().
 * Fixes double encoding issue in Drupal feeds.
 */
function nlr_preprocess_views_view_rss(&$vars)
{
    if ($vars['view']->name == 'taxonomy_term') {
        $vars['title'] = htmlspecialchars_decode($vars['title'], ENT_QUOTES);
    }
}

function nlr_views_api()
{
    return array(
        'api' => 3,
    );
}

function pager_query($query, $limit = 10, $element = 0, $count_query = NULL)
{
    global $pager_page_array, $pager_total, $pager_total_items;
    $page = isset($_GET['page']) ? $_GET['page'] : '';

    // Substitute in query arguments.
    $args = func_get_args();
    $args = array_slice($args, 4);
    // Alternative syntax for '...'
    if (isset($args[0]) && is_array($args[0])) {
        $args = $args[0];
    }

    // Construct a count query if none was given.
    if (!isset($count_query)) {
        $count_query = preg_replace(array('/SELECT.*?FROM /As', '/ORDER BY .*/'), array('SELECT COUNT(*) FROM ', ''), $query);
    }

    // Convert comma-separated $page to an array, used by other functions.
    $pager_page_array = explode(',', $page);

    // We calculate the total of pages as ceil(items / limit).
    $pager_total_items[$element] = db_result(db_query($count_query, $args));
    $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
    $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
    return db_query_range($query, $args, $pager_page_array[$element] * $limit, $limit);
}

function db_result($result)
{
    if ($result && mysql_num_rows($result) > 0) {
        // The mysql_fetch_row function has an optional second parameter $row
        // but that can't be used for compatibility with Oracle, DB2, etc.
        $array = mysql_fetch_row($result);
        return $array[0];
    }
    return FALSE;
}

function nlr_views_pre_execute(&$view) {
  if ($view->name == 'author_content_list') {

      switch ($view->current_display) {
          case 'block_1':

              if (arg(0) == 'node' && is_numeric(arg(1))) {

                  $nid = arg(1);

                  $a = db_select('node', 'node');
                  $a->leftJoin(
                      'field_data_field_author',
                      'field_data_field_author',
                      'node.nid = field_data_field_author.entity_id AND (field_data_field_author.entity_type = :entity_type AND field_data_field_author.deleted = :deleted)',
                      array(
                          ':entity_type' => 'node',
                          ':deleted' => 0,
                      )
                  );
                  $a->addField('node', 'title', 'node_title');
                  $a->addField('node', 'nid', 'nid');
                  $a->addField('node', 'created', 'node_created');
                  $a->condition('node.status', '1')
                      ->condition('field_data_field_author.field_author_nid', $nid);

                  $b = db_select('node', 'node');
                  $b->leftJoin(
                      'field_data_field_author_2',
                      'field_data_field_author_2',
                      'node.nid = field_data_field_author_2.entity_id AND (field_data_field_author_2.entity_type = :entity_type AND field_data_field_author_2.deleted = :deleted)',
                      array(
                          ':entity_type' => 'node',
                          ':deleted' => 0,
                      )
                  );
                  $b->addField('node', 'title', 'node_title');
                  $b->addField('node', 'nid', 'nid');
                  $b->addField('node', 'created', 'node_created');
                  $b->condition('node.status', '1')
                      ->condition('field_data_field_author_2.field_author_2_nid', $nid);

                  $c = db_select('node', 'node');
                  $c->leftJoin(
                      'field_data_field_sub_contrib',
                      'field_data_field_sub_contrib',
                      'node.nid = field_data_field_sub_contrib.entity_id AND (field_data_field_sub_contrib.entity_type = :entity_type AND field_data_field_sub_contrib.deleted = :deleted)',
                      array(
                          ':entity_type' => 'node',
                          ':deleted' => 0,
                      )
                  );
                  $c->addField('node', 'title', 'node_title');
                  $c->addField('node', 'nid', 'nid');
                  $c->addField('node', 'created', 'node_created');
                  $c->condition('node.status', '1')
                      ->condition('field_data_field_sub_contrib.field_sub_contrib_nid ', $nid);

                  $d = db_select('node', 'node');
                  $d->leftJoin(
                      'field_data_field_contributor_2',
                      'field_data_field_contributor_2',
                      'node.nid = field_data_field_contributor_2.entity_id AND (field_data_field_contributor_2.entity_type = :entity_type AND field_data_field_contributor_2.deleted = :deleted)',
                      array(
                          ':entity_type' => 'node',
                          ':deleted' => 0,
                      )
                  );
                  $d->addField('node', 'title', 'node_title');
                  $d->addField('node', 'nid', 'nid');
                  $d->addField('node', 'created', 'node_created');
                  $d->condition('node.status', '1')
                      ->condition('field_data_field_contributor_2.field_contributor_2_nid', $nid);

                  $e = db_select('node', 'node');
                  $e->leftJoin(
                      'field_data_field_contributor_3',
                      'field_data_field_contributor_3',
                      'node.nid = field_data_field_contributor_3.entity_id AND (field_data_field_contributor_3.entity_type = :entity_type AND field_data_field_contributor_3.deleted = :deleted)',
                      array(
                          ':entity_type' => 'node',
                          ':deleted' => 0,
                      )
                  );
                  $e->addField('node', 'title', 'node_title');
                  $e->addField('node', 'nid', 'nid');
                  $e->addField('node', 'created', 'node_created');
                  $e->condition('node.status', '1')
                      ->condition('field_data_field_contributor_3.field_contributor_3_nid', $nid);

                  $f = db_select('node', 'node');
                  $f->leftJoin(
                      'field_data_field_contributor_4',
                      'field_data_field_contributor_4',
                      'node.nid = field_data_field_contributor_4.entity_id AND (field_data_field_contributor_4.entity_type = :entity_type AND field_data_field_contributor_4.deleted = :deleted)',
                      array(
                          ':entity_type' => 'node',
                          ':deleted' => 0,
                      )
                  );
                  $f->addField('node', 'title', 'node_title');
                  $f->addField('node', 'nid', 'nid');
                  $f->addField('node', 'created', 'node_created');
                  $f->condition('node.status', '1')
                      ->condition('field_data_field_contributor_4.field_contributor_4_nid', $nid);

                  $a->range(0, 20);
                  $a->orderBy('node_created', 'DESC');

                  $a = $b->union($a, 'UNION ALL');
                  $a = $c->union($a, 'UNION ALL');
                  $a = $d->union($a, 'UNION ALL');
                  $a = $e->union($a, 'UNION ALL');
                  $a = $f->union($a, 'UNION ALL');

                  $view->build_info['query'] = $a;
                  break;
              }
      }
  }
}

/**
 * Implements hook_js_alter
 * Replace autocomplete.js with customized version in order to adjust keystrokes
 */
function nlr_js_alter(&$javascript) {
  $javascript['https://www.googletagservices.com/tag/js/gpt.js']['data'] = 'https://a.publir.com/platform/505.js';
  $javascript['https://www.googletagservices.com/tag/js/gpt.js']['attributes'] = array('id' => 'headerbidder');
  $javascript['misc/autocomplete.js']['data']   = drupal_get_path('module', 'nlr') . '/js/autocomplete.js';
  $javascript['misc/autocomplete.js']['scope']  = 'header';
  $javascript['misc/autocomplete.js']['type']  = 'file';
  $javascript['misc/autocomplete.js']['weight'] = 100;
  $javascript['misc/autocomplete.js']['cache']  = TRUE;
  $javascript['misc/autocomplete.js']['group']  = 'nlr';
  $javascript['misc/autocomplete.js']['every_page']  = FALSE;
  $javascript['misc/autocomplete.js']['defer']  = FALSE;
  $javascript['misc/autocomplete.js']['preprocess']  = TRUE;
}

/**
 * Implements hook_block_info().
 */
function nlr_block_info()
{
    $blocks = array();
    $blocks['nlr_piwik_keywords'] = array(
        'info' => t('TOP 20 Piwik Keywords'),
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function nlr_block_view($delta = '')
{
    $block = array();
    switch ($delta) {
        case 'nlr_piwik_keywords':
            $block['subject'] = '';
            $block['content'] = _nlr_piwik_keywords();
            break;
    }
    return $block;
}

/**
 * Implementation of hook_form_alter.
 */
function nlr_form_alter(&$form, $form_state, $form_id)
{
	if ('node_form' == stristr($form_id, 'node_form')) {

        $form['audit-summary'] = array(
            '#type' => 'fieldset',
            '#weight' => -999,
            '#title' => t('Audit Overview'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
            '#description' => nlr_audit_summary($form['nid']['#value'], $form['type']['#value'])
        );

        $form['audit'] = array(
            '#type' => 'fieldset',
            '#weight' => -998,
            '#title' => t('Audit History'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#description' => nlr_audit_list($form['nid']['#value'], $form['type']['#value'])
        );

		    if ($form_id == 'article_node_form') {

            // Move Google News Keywords from 'advanced' to 'basic' section
            $form['metatags']['und']['basic']['news_keywords'] = $form['metatags']['und']['advanced']['news_keywords'];
            $form['metatags']['und']['basic']['news_keywords']['value']['#description'] = 'A comma-separated list of keywords about the page.';
            unset($form['metatags']['und']['advanced']['news_keywords']);

            $form['body']['#weight'] = 3;
            $form['additional_settings']['#weight'] = 101;
            $form['metatags']['#type'] = 'fieldset';
            $form['metatags']['#group'] = NULL;
            $form['actions']['#weight'] = 115;
            $params = explode('/',$_SERVER['REQUEST_URI']);
            if ($params[2] == 'add' && $params[4] != NULL) {
                $user=user_load($params[4]);
                $form['author']['name']['#default_value'] = $user->name;
            }
            $form['#after_build'][] = '_nlr_after_form_alter_article';
        }

        if ($form_id == 'author_node_form' ||
            $form_id == 'article_source_node_form' ||
            $form_id == 'award_node_form' ||
            $form_id == 'event_node_form' ||
            $form_id == 'org_node_form') {

          // Default the author of the node to the UID of the 4th argument
          $params = explode('/',$_SERVER['REQUEST_URI']);
          if ($params[2] == 'add' && $params[4] != NULL) {
            $user=user_load($params[4]);
            $form['author']['name']['#default_value'] = $user->name;
          }
        }
    }

    // Default active menu link for Practice Groups
    if (substr($form_id, -10) == '_node_form' && $form['nid']['#value'] == NULL) {
        $content_type = substr($form_id, 0, -10);
        if ($content_type == 'practice_groups')
            $form['menu']['enabled']['#default_value'] = TRUE;
    }
}

/**
 * Private function for injecting javascript during hook_form_alter.
 */
function _nlr_after_form_alter_article($form, &$form_state)
{
    $path = drupal_get_path('module', 'nlr');
    drupal_add_js("$path/form-alter.js");
    return $form;
}

/**
 * Implementation of hook_object_prepare($node)
 *
 * @param $node
 *   A node object.
 */
function nlr_object_prepare($node)
{
    $params = explode('/', $_SERVER['REQUEST_URI']);
    if ($params[2] == 'add' && $params[4] != NULL) {
        $node->uid = $params[4];
    }
}

/**
 * Implementation of hook_node_insert
 */
function nlr_node_insert($node)
{

    // Trigger action when an article is made live
    $audit = array( "old" => array(), "new" => array($node) );
    _nlr_audit_add($node->nid, $node->type, $audit);

}

/**
 * Implementation of hook_node_update.
 */
function nlr_node_update($node)
{

    if ($node->type == 'practice_groups') {
        // modify URL Alias for PG feed
        $arg = '';
        foreach ($node->taxonomy_vocabulary_2['und'] as $val) {
            if (strlen($arg) > 0)
                $arg = $arg . ',' . $val['tid'];
            else
                $arg = $val['tid'];
        }

        // Delete current URL Alias
        $path = path_load(
            array('source' => $node->path['alias'] . "/feed")
        );
        path_delete($path['pid']);

        // Add URL Alias
        $path = array(
            'source' => $node->path['alias'] . "/feed",
            'alias' => "practice-groups/" . $arg . "/feed",
        );
        path_save($path);
    }

    // Audit change
    $audit = _nlr_audit_record_change($node);
    _nlr_audit_add($node->nid, $node->type, $audit);

    if (isset($node->status) && ($node->status == 1 && ($node->original->status != 1))) {
        // Trigger action when a node is made live
        $title = $node->title;
        $link = url('node/' . $node->nid, array('absolute' => true));
        _nlr_node_update($title, $link);
    }

}

/**
 * Do not check updates for specific modules
 */
function nlr_update_projects_alter(&$projects)
{
    unset($projects['ad']);
}

/**
 * Implementation of private function.
 */
function _nlr_piwik_keywords()
{
    // Initialize
    $cnt = 0;
    $block_content = '<div class="piwik-keywords-block"><ul>';
    $analytics_server = 'analyticsupdate.natlawreview.com';
    if ($_SERVER['HTTP_HOST'] == 'www.natlawreview.com') {
        $analytics_server = 'analytics.natlawreview.com';
    } else if ($_SERVER['HTTP_HOST'] == 'www.tekfads.com') {
        $analytics_server = 'analytics.tekfads.com';
    } else if ($_SERVER['HTTP_HOST'] == 'update.tekfads.com') {
        $analytics_server = 'analyticsupdate.tekfads.com';
    }

    // keywords past day
    $url = 'https://' . $analytics_server . '/index.php?module=API&method=Referers.getKeywords&idSite=1&period=range&date=last1&format=JSON&token_auth=55a992307271d4dd7598bcd752284373';

    //  Initiate curl
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_URL, $url);
    $result = curl_exec($ch);
    curl_close($ch);

    $json = json_decode($result, true);

    foreach ($json as $keyword) {
        if ($cnt >= 20) break;
        if ($keyword['label'] == 'Keyword not defined') continue;
        if (strpos($keyword['label'], 'ttp://')) continue;
        $block_content .= '<li><a href="https://google.com/search?q=' . urlencode($keyword['label']) . '">';
        $block_content .= $keyword['label'];
        $block_content .= '</a></li>';
        $cnt++;
    }

    $block_content .= '</ul></div>';
    return $block_content;
}

/**
 * Call analytics when a node is updated
 * @return string
 */
function _nlr_node_update($title, $link)
{
    // initialize
    $url = 'http://test.natlawreview.com/piwik.php';

    // posted fields
    $fields = array(
        'idsite' => 1,
        'url' => urlencode($link),
        'e_c' => 'Article',
        'e_a' => urlencode($title),
        'e_n' => urlencode($link),
        'rec' => 1
    );

    // url-ify the data for the POST
    foreach ($fields as $key => $value) {
        $fields_string .= $key . '=' . $value . '&';
    }
    $fields_string = rtrim($fields_string, '&');
    $fields_string = array('requests' => '?' . $fields_string);
    $request = json_encode($fields_string);

    // initiate curl
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $request);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Content-Length: ' . strlen($request)));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $result = curl_exec($ch);
    curl_close($ch);

    // curl -i -k -X POST -d '{"requests":["?idsite=1&url=http://update.natlawreview.com/article/Test_Article&e_c=Articles&e_a=Test_Article | The National Law Review&e_n=http://update.natlawreview.com/article/Test_Article&rec=1","?idsite= 59& url= http://update.natlawreview.com/article/Test�Article&e_c=Articles&e_a= Test Article | The National Law Review&e_n= http://update.natlawreview.com/article/Test�Article&rec=1"]}' https://test.natlawreview.com/piwik.php
}

/**
 * NLR AUDIT
 * DB:
 *     uid:             Drupal user who initiated the audit
 *     id:              Node id where the audit took place
 *     node_type:       The node type of the audit (ARTICLE, EVENT, AUTHOR or ORGANIZATION)
 *     type:            Type of audit performed (SYSTEM or USER)
 *     content_before:  Content before it was modified
 *     content_after:   Content after it was modified
 *     create_date:     Date and time the audit was performed
 *
 * Helper Functions
 *  _nlr_audit_load
 *  _nlr_audit_add
 *  _nlr_audit_record_change
 */

/**
 * Helper function to print users by role
 */
function _nlr_users_by_role($role_name)
{
    $role = user_role_load_by_name($role_name);
    $query = 'SELECT ur.uid
        FROM {users_roles} AS ur
        WHERE ur.rid = :rid';
    $result = db_query($query, array(':rid' => $role->rid));
    $uids = $result->fetchCol();
    return user_load_multiple($uids);
}

/**
 * Heler function to print clean nodes for audits
 */
function _nlr_audit_clean_node($node)
{
    $n = new stdClass();

    switch ($node->type) {
        case 'author':
            $n->uid = $node->uid;
            $n->title = $node->title;
            break;
        case 'taxonomy':
            $v = taxonomy_vocabulary_load($node->vid);
            $n->name = $node->name;
            $n->vocabulary_name = $v->name;
            break;
        case 'article_source':
            $n->title = $node->title;
            break;
    }
    return $n;
}
/**
 * Helper functions for dynamically loading edit forms.  Works only in main module, not in includes.
 */
function _nlr_audit_load($audit_id)
{
    $result = db_query("SELECT * FROM {nlr_audit} a WHERE a.audit_id = '%s'", $audit_id);
    $audit = db_fetch_object($result);
    return $audit;
}
/**
 * Helper function that records audit events
 */
function _nlr_audit_add($id, $node_type, $audit, $audit_type = 'SYSTEM')
{
    global $user;
    $args = array(
        ':uid' => $user->uid,
        ':id' => $id,
        ':node_type' => $node_type,
        ':content_before' => json_encode($audit['old'], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES),
        ':content_after' => json_encode($audit['new'], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES),
        ':audit_type' => $audit_type
    );
    db_query('INSERT INTO {nlr_audit} (uid, id, node_type, content_before, content_after, audit_type, create_date)
        VALUES (:uid,:id,:node_type,:content_before,:content_after,:audit_type,now())', $args);
}
/**
 * Helper function that returns a string of audit changes.
 */
function _nlr_audit_record_change($node) {
  $audit = array( "old" => array(), "new" => array() );

  foreach($node as $new_field => $new_val) {

    if ($new_field === 'field_aux_article_image') continue;
    if ($new_field === 'field_main_rotating_image') continue;

    foreach($node->original as $old_field => $old_val) {

      if ( is_array($old_val) && is_array($new_val) ) {

        // is array
        if (!is_array($old_val['und'])) $old_val['und'] = array();
        if (!is_array($new_val['und'])) $new_val['und'] = array();

        if ($new_field === $old_field) {
          if (is_array($new_val['und'])) {

            // Make arrays equal in size so we can get an acutal diff
            do {
              $size_new = sizeof($new_val['und']);
              $size_old = sizeof($old_val['und']);
              (($size_old > $size_new) ? array_push($new_val['und'], array(null)) : $new_val['und']);
              (($size_new > $size_old) ? array_push($old_val['und'], array(null)) : $old_val['und']);
            } while ($size_new !== $size_old);

            foreach($new_val['und'] as $new_f => $new_v) {
              foreach($old_val['und'] as $old_f => $old_v) {
                unset($old_v['safe_summary']);
                unset($old_v['safe_value']);
                unset($old_v['format']);
                if (is_array($new_v)) {
                  if (isset($new_v['format'])) unset($new_v['format']);
                }

                if (($new_f === $old_f) && ((sizeof(array_diff($new_v, $old_v)) !== 0) || (sizeof(array_diff($old_v, $new_v)) !== 0)) ) {

                  switch (true) {
                    case isset($old_v['nid']):
                      $old_v = node_load($old_v['nid']);
                      $old_v = _nlr_audit_clean_node($old_v);
                    case isset($new_v['nid']):
                      $new_v = node_load($new_v['nid']);
                      $new_v = _nlr_audit_clean_node($new_v);
                      break;
                    case isset($old_v['tid']):
                      $old_v = taxonomy_term_load($old_v['tid']);
                      if ($old_v) $old_v->type = 'taxonomy';
                      $old_v = _nlr_audit_clean_node($old_v);
                    case isset($new_v['tid']):
                      $new_v = taxonomy_term_load($new_v['tid']);
                      if ($new_v) $new_v->type = 'taxonomy';
                      $new_v = _nlr_audit_clean_node($new_v);
                      break;
                  }

                  array_push($audit['old'],array( 'field' => $new_field, 'content' => $old_v));
                  array_push($audit['new'],array( 'field' => $new_field, 'content' => $new_v));

                }
              }
            }
          }
        }
        } else {

            // is single values
            if (($new_field === $old_field) && ($new_val != $old_val)) {

                if ($new_field == 'changed') continue;

                array_push($audit['old'], array('field' => $new_field, 'content' => $old_val));
                array_push($audit['new'], array('field' => $new_field, 'content' => $new_val));
            }
        }
        }
    }
    return $audit;
}

function nlr_audit_summary($id, $node_type) {

    // @TODO: Give long name instead of short name on audits
    // @TODO: Use CST instead of GMT/UTC

    // Created By
    $args = array(':id' => $id, ':node_type' => $node_type);
    $sql = 'SELECT uid, CONVERT_TZ(create_date,\'GMT\',\'US/CENTRAL\') as "create_date", content_before, content_after, audit_type, uid
        FROM {nlr_audit}
        WHERE node_type = :node_type
        AND id = :id ORDER BY create_date DESC';
    $result = db_query($sql, $args);

    foreach ($result as $audit) {
        $before = json_decode($audit->content_before, false);
        $after  = json_decode($audit->content_after, false);
        $u = user_load($audit->uid);
        $status_before = null;
        $status_after  = null;
        foreach($before as $record) {
            if ($record->field == 'status') $status_before = $record->content;
        }
        foreach($after as $record) {
            if ($record->field == 'status') $status_after = $record->content;
        }

        if ($status_before === 0 && $status_after === 1) {
            $row[] = array(
                'Published By',
                $u->name,
                $audit->create_date
            );
        } else if (sizeof($before) === 0 && $status_after === 1) {
            $row[] = array(
                'Published By',
                $u->name,
                $audit->create_date
            );
        } else if ($status_before === 1 && $status_after === 0) {
            $row[] = array(
                'Un-Published By',
                $u->name,
                $audit->create_date
            );
        } else if ($audit->content_before === '[]' && $audit->content_after !== '[]') {
            $row[] = array(
                'Created By',
                $u->name,
                $audit->create_date
            );
        } else if ($audit->content_before === $audit->content_after) {
            $row[] = array(
                'Saved By',
                $u->name,
                $audit->create_date
            );
        } else {
            $row[] = array(
                'Updated By',
                $u->name,
                $audit->create_date
            );
        }
    }

    $output .= theme('table',  array(
        'header' => array(),
        'rows' => $row,
        'empty' => 'No nodes have been worked on the last 24 hours.',
        'attributes' => array('style' => 'width: 100%' )));

    return $output;
}
/**
 * Provides a list of audit items
 *
 * @param int $id unique identifer of referenced object
 * @param string $node_type The type of relation
 * @return array formatted list of audit items
 *
 */
function nlr_audit_list($id, $node_type)
{

    require_once 'class.Diff.php';

    // Audit heading
    $header = array(
        array('data' => t('Name')),
        array('data' => t('Difference')),
        array('data' => t('Date'))
    );

    // Query audit items
    $args = array(':id' => $id, ':node_type' => $node_type);
    $sql = 'SELECT audit_id, CONVERT_TZ(create_date,\'GMT\',\'US/CENTRAL\') as "create_date", content_before, content_after, audit_type, uid
        FROM {nlr_audit}
        WHERE node_type = :node_type
        AND id = :id ORDER BY create_date DESC';
    $result = db_query($sql, $args);

    foreach ($result as $audit) {
        $u = user_load($audit->uid);
        $diff = Diff::toTable(Diff::compare($audit->content_before, $audit->content_after));
        $audits[] = array(
            $u->name,
            $diff,
            $audit->create_date
        );

        // Query audit items
        $args = array(':id' => $id, ':node_type' => $node_type);
        $sql = 'SELECT audit_id, CONVERT_TZ(create_date,\'GMT\',\'US/CENTRAL\') as "create_date", content_before, content_after, uid
            FROM {nlr_audit}
            WHERE node_type = :node_type
            AND id = :id ORDER BY create_date DESC';
        $result = db_query($sql, $args);

        foreach ($result as $audit) {
            $u = user_load($audit->uid);
            $diff = Diff::toTable(Diff::compare($audit->content_before, $audit->content_after));
            $audits[] = array(
                $u->name,
                $diff,
                $audit->create_date
            );
        }

        $output = theme('table',  array('header' => $header, 'rows' => $audits));

        return $output;
    }
}
