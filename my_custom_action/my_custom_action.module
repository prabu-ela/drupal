<?php


use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * @file
 * My Custom Action module file.
 */

/**
 * Implements hook_menu_local_tasks_alter().
 */
function my_custom_action_menu_local_tasks_alter(&$data, $route_name) {
  if(\Drupal::currentUser()->id()) {
    switch($route_name) {
      case 'entity.user.canonical':
      case 'entity.user.edit_form':
      case 'view.commerce_user_orders.order_page':
      case 'view.my_subscription.page_1':
      case 'entity.commerce_payment_method.collection':
      case 'profile.user_page.single':
      break;
    }
  }
}





/**
 * Implements hook_cron().
 */
// function my_custom_action_cron() {

//   if(date('j') == 1) {
//     $credit_card_expiry_cron_time = \Drupal::state()->get('my_custom_action.notify_credit_card_expiry_next_cron_time', 0);
//     $request_time = \Drupal::time()->getCurrentTime();
//     if($request_time > $credit_card_expiry_cron_time) {
//       $current_month = date('m');
//       // add month to current month to fetch credit card which is going to expry next month
//       $credit_card_next_month = $current_month + 1;
//       $credit_card_year = date('Y');
//       if($current_month == 12) {
//         $credit_card_next_month = 1;
//         $credit_card_year = date('Y') + 1;
//       }
//       $db = \Drupal::database();
//       $query = $db->select('commerce_payment', 'cp');
//       $query->join('commerce_payment_method', 'cpm', 'cp.payment_method = cpm.method_id');
//       $query->join('commerce_payment_method__card_exp_month', 'ccm', 'cpm.method_id = ccm.entity_id and ccm.bundle = :bundle', [':bundle' => 'credit_card']);
//       // $query->join('commerce_order', 'co', 'co.order_id = cp.order_id');
//       $query->join('commerce_order_item', 'coi', 'coi.order_id = cp.order_id');
//       $query->join('commerce_product_variation', 'cpv', 'coi.purchased_entity = cpv.variation_id');
//       $query->fields('cpm', ['uid']);
//       $query->join('commerce_payment_method__card_exp_year', 'ccy', 'cpm.method_id = ccy.entity_id and ccy.bundle = :bundle', [':bundle' => 'credit_card']);
//       $query->condition('cpm.type', 'credit_card');
//       $query->condition('ccm.card_exp_month_value', $credit_card_next_month);
//       $query->condition('ccy.card_exp_year_value', $credit_card_year);
//       $query->condition('cpm.uid', 0, '<>');
//       $query->condition('cpv.type', ['default', 'free_trial_to_rolling'], 'IN');
//       $credit_card_query_result = $query->execute()->fetchAllKeyed(0, 0);
//       $uids = array_chunk($credit_card_query_result, 3);
//       if(count($credit_card_query_result) && count($uids)) {
//         $queue = \Drupal::queue('notify_credit_card_expiry_customer');
//         foreach($uids as $data) {
//           // Create item to queue.
//           $queue->createItem($data);
//         }
//       }
//       \Drupal::state()->set('my_custom_action.notify_credit_card_expiry_next_cron_time',strtotime('+1 month'));
//     }
//   }
//   /*
//    * Need to send the mail to subscriber before their license expiry
//    */
//   $notify_subscriber_before_license_expiry = \Drupal::state()->get('my_custom_action.notify_subscriber_before_license_expiry_next_cron_time', 0);
//   $request_time = \Drupal::time()->getCurrentTime();
//   if($request_time > $notify_subscriber_before_license_expiry) {
//     $licenses = getLicensesToExpireBeforeWeek();
//     if (count($licenses)) {
//       $split_licenses = array_chunk($licenses, 100);
//       $queue = \Drupal::queue('notify_subscriber_before_license_expiry');
//       foreach($split_licenses as $license_data)  {
//         $queue->createItem( $license_data);
//       }
//       \Drupal::state()->set('my_custom_action.notify_subscriber_before_license_expiry_next_cron_time', time() + 86399);
//     }
//   }
//   get_recurring_orders();
// }


/**
 * Implements hook_mail().
 */
/*
function my_custom_action_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );
  switch ($key) {
    case 'notify_credit_card_expiry_to_customer':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      $message['headers'] = ['Content-Type' => 'text/html; charset=UTF-8;',
                             'Content-Transfer-Encoding' => '8Bit'
      ];
    break;
    case 'notify_subscriber_before_license_expiry':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      $message['headers'] = ['Content-Type' => 'text/html; charset=UTF-8;',
                             'Content-Transfer-Encoding' => '8Bit'
      ];
      $message['headers']['cc'] = $params['cc'];
    break;
    case 'auto_renewal_subscription_recurring_order':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      $message['headers'] = ['Content-Type' => 'text/html; charset=UTF-8;',
                             'Content-Transfer-Encoding' => '8Bit'
      ];
      $message['headers']['cc'] = $params['cc'];
    break;
  }
}*/

/*
 * We need to add remove button for vimeo video upload field in the content types like Article etc. To bring this remove button in the node form enabled the multiple_fields_remove_button contrib module. It adds the remove button for default multiple field values like string, entity_reference etc. We neet to add remove button in our unlimited video upload field. Contrib module has provided hook to add our field and below is the code to add it
 */


